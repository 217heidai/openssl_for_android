name: Android Build and Release

on:
  push:
    branches: [ master ]
  workflow_dispatch:
  schedule:
    # Run daily at midnight UTC
    - cron: '0 0 * * *'

# get dynamic versions from upstream
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
jobs:
  get_versions:
    name: Fetch Latest Versions
    runs-on: ubuntu-latest
    outputs:
      openssl_version: ${{ steps.openssl.outputs.openssl_version }}
      curl_version: ${{ steps.curl.outputs.curl_version }}
    steps:
      - name: Install jq and curl
        run: sudo apt-get update -qq && sudo apt-get install -qq jq curl

      - name: Get latest OpenSSL version
        id: openssl
        run: |
          tag=$(curl -s https://api.github.com/repos/openssl/openssl/releases/latest | jq -r .tag_name)
          version=${tag#openssl-}
          version=${version#OpenSSL-}
          echo "openssl_version=$version" >> $GITHUB_OUTPUT

      - name: Get latest cURL version
        id: curl
        run: |
          tag=curl-$(curl -s https://api.github.com/repos/curl/curl/releases/latest | jq -r .name)
          version=${tag#curl-}
          echo "curl_version=$version" >> $GITHUB_OUTPUT

  Compile_OpenSSL_for_Android:
    name: Compile OpenSSL ${{ matrix.ANDROID_TARGET_ABI }}
    needs: get_versions
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - ANDROID_TARGET_ABI: armeabi-v7a
            ANDROID_TARGET_API: "21"
            ANDROID_NDK: r27c
          - ANDROID_TARGET_ABI: arm64-v8a
            ANDROID_TARGET_API: "21"
            ANDROID_NDK: r27c
          - ANDROID_TARGET_ABI: riscv64
            ANDROID_TARGET_API: "35"
            ANDROID_NDK: r27c
          - ANDROID_TARGET_ABI: x86
            ANDROID_TARGET_API: "21"
            ANDROID_NDK: r27c
          - ANDROID_TARGET_ABI: x86_64
            ANDROID_TARGET_API: "21"
            ANDROID_NDK: r27c
    env:
      OPENSSL_VERSION: ${{ needs.get_versions.outputs.openssl_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install prerequisites
        run: sudo apt-get update -qq && sudo apt-get install -qq aria2

      - name: Download Android NDK
        run: |
          aria2c -q -o android-ndk-${{ matrix.ANDROID_NDK }}.zip \
            https://dl.google.com/android/repository/android-ndk-${{ matrix.ANDROID_NDK }}-linux.zip
          unzip -q android-ndk-${{ matrix.ANDROID_NDK }}.zip

      - name: Download OpenSSL
        run: |
          aria2c -q -o openssl-${{ env.OPENSSL_VERSION }}.tar.gz \
            https://github.com/openssl/openssl/releases/download/openssl-${{ env.OPENSSL_VERSION }}/openssl-${{ env.OPENSSL_VERSION }}.tar.gz
          tar xf openssl-${{ env.OPENSSL_VERSION }}.tar.gz

      - name: Build OpenSSL
        run: |
          bash openssl_build_new.sh \
            ${{ matrix.ANDROID_TARGET_API }} \
            ${{ matrix.ANDROID_TARGET_ABI }} \
            ${{ env.OPENSSL_VERSION }} \
            ${{ matrix.ANDROID_NDK }}

      - name: Package OpenSSL artifact
        run: |
          tar -C openssl_${{ env.OPENSSL_VERSION }}_${{ matrix.ANDROID_TARGET_ABI }} \
            -czf OpenSSL_${{ env.OPENSSL_VERSION }}_${{ matrix.ANDROID_TARGET_ABI }}.tar.gz .

      - name: Upload OpenSSL artifact
        uses: actions/upload-artifact@v4
        with:
          name: OpenSSL-${{ matrix.ANDROID_TARGET_ABI }}
          path: OpenSSL_${{ env.OPENSSL_VERSION }}_${{ matrix.ANDROID_TARGET_ABI }}.tar.gz

  Compile_cURL_for_Android:
    name: Compile cURL ${{ matrix.ANDROID_TARGET_ABI }}
    needs: [get_versions, Compile_OpenSSL_for_Android]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - ANDROID_TARGET_ABI: armeabi-v7a
            ANDROID_TARGET_API: "21"
            ANDROID_NDK: r27c
          - ANDROID_TARGET_ABI: arm64-v8a
            ANDROID_TARGET_API: "21"
            ANDROID_NDK: r27c
          - ANDROID_TARGET_ABI: riscv64
            ANDROID_TARGET_API: "35"
            ANDROID_NDK: r27c
          - ANDROID_TARGET_ABI: x86
            ANDROID_TARGET_API: "21"
            ANDROID_NDK: r27c
          - ANDROID_TARGET_ABI: x86_64
            ANDROID_TARGET_API: "21"
            ANDROID_NDK: r27c
    env:
      CURL_VERSION: ${{ needs.get_versions.outputs.curl_version }}
      OPENSSL_VERSION: ${{ needs.get_versions.outputs.openssl_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install prerequisites
        run: sudo apt-get update -qq && sudo apt-get install -qq aria2 autoconf automake libtool pkg-config

      - name: Download Android NDK
        run: |
          aria2c -q -o android-ndk-${{ matrix.ANDROID_NDK }}.zip \
            https://dl.google.com/android/repository/android-ndk-${{ matrix.ANDROID_NDK }}-linux.zip
          unzip -q android-ndk-${{ matrix.ANDROID_NDK }}.zip

      - name: Download cURL
        run: |
          aria2c -q -o curl-${{ env.CURL_VERSION }}.tar.gz \
            https://curl.se/download/curl-${{ env.CURL_VERSION }}.tar.gz
          tar xf curl-${{ env.CURL_VERSION }}.tar.gz

      - name: Download OpenSSL artifact
        uses: actions/download-artifact@v4
        with:
          name: OpenSSL-${{ matrix.ANDROID_TARGET_ABI }}
          path: ./

      - name: Extract OpenSSL artifact
        run: |
          mkdir -p openssl_${{ env.OPENSSL_VERSION }}_${{ matrix.ANDROID_TARGET_ABI }}
          tar -xzf OpenSSL_${{ env.OPENSSL_VERSION }}_${{ matrix.ANDROID_TARGET_ABI }}.tar.gz -C openssl_${{ env.OPENSSL_VERSION }}_${{ matrix.ANDROID_TARGET_ABI }}

      - name: Build cURL with SSL
        run: |
          bash curl_build.sh \
            ${{ matrix.ANDROID_TARGET_API }} \
            ${{ matrix.ANDROID_TARGET_ABI }} \
            ${{ env.CURL_VERSION }} \
            ${{ matrix.ANDROID_NDK }} \
            ${{ env.OPENSSL_VERSION }}

      - name: Package cURL artifact
        run: |
          tar -C curl_${{ env.CURL_VERSION }}_${{ matrix.ANDROID_TARGET_ABI }} \
            -czf curl_${{ env.CURL_VERSION }}_${{ matrix.ANDROID_TARGET_ABI }}.tar.gz .

      - name: Upload cURL artifact
        uses: actions/upload-artifact@v4
        with:
          name: cURL-${{ matrix.ANDROID_TARGET_ABI }}
          path: curl_${{ env.CURL_VERSION }}_${{ matrix.ANDROID_TARGET_ABI }}.tar.gz

  Publish_Release:
    needs:
      - Compile_OpenSSL_for_Android
      - Compile_cURL_for_Android
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Set release date
        id: date
        run: |
          echo "release_date=$(date -u +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          
      - name: Create organized directory structure
        run: |
          # Create the organized directory structure
          mkdir -p Output/{curl,openssl}/{arm64-v8a,armeabi-v7a,x86,x86_64,riscv64}/{include,lib}
          
          # Extract OpenSSL artifacts
          for ABI in arm64-v8a armeabi-v7a x86 x86_64 riscv64; do
            if [ -f "artifacts/OpenSSL-${ABI}/OpenSSL_${{ needs.get_versions.outputs.openssl_version }}_${ABI}.tar.gz" ]; then
              # Extract include and lib directories
              mkdir -p tmp_openssl
              tar -xzf "artifacts/OpenSSL-${ABI}/OpenSSL_${{ needs.get_versions.outputs.openssl_version }}_${ABI}.tar.gz" -C tmp_openssl
              
              # Copy to organized structure
              cp -r tmp_openssl/include/* "Output/openssl/${ABI}/include/"
              cp -r tmp_openssl/lib/* "Output/openssl/${ABI}/lib/"
              
              # Clean up temp directory
              rm -rf tmp_openssl
            fi
          done
          
          # Extract cURL artifacts
          for ABI in arm64-v8a armeabi-v7a x86 x86_64 riscv64; do
            if [ -f "artifacts/cURL-${ABI}/curl_${{ needs.get_versions.outputs.curl_version }}_${ABI}.tar.gz" ]; then
              # Extract include and lib directories
              mkdir -p tmp_curl
              tar -xzf "artifacts/cURL-${ABI}/curl_${{ needs.get_versions.outputs.curl_version }}_${ABI}.tar.gz" -C tmp_curl
              
              # Copy to organized structure
              cp -r tmp_curl/include/* "Output/curl/${ABI}/include/"
              cp -r tmp_curl/lib/* "Output/curl/${ABI}/lib/"
              
              # Clean up temp directory
              rm -rf tmp_curl
            fi
          done
          
          # Create the final zip file
          cd Output
          zip -r ../Output.zip .
          cd ..
          
          # List contents to verify structure
          unzip -l Output.zip

      - name: Create consolidated release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: release-openssl${{ needs.get_versions.outputs.openssl_version }}-curl${{ needs.get_versions.outputs.curl_version }}
          name: >-
            OpenSSL ${{ needs.get_versions.outputs.openssl_version }} & cURL ${{ needs.get_versions.outputs.curl_version }} Android Builds
            (Updated ${{ steps.date.outputs.release_date }})
          files: Output.zip
